The Chain of Responsibility

Bu davranışsal tasarım modeli, yazılım oluşturma şeklimizi büyük ölçüde değiştirecek. Bu nedenle oluşturduğumuz her tür uygulamada kesinlike yaralanabileceğiniz harika bir modeldir. Bo model için belirli uygulama detaylarına bakmadan özellikleri hakkında konuşmamız gerekiyor. Sorumluluk zinciri modeli genellikle bu üç farklı beleşene ayrılmaktadır. Uygulamadan birşey çağıran göndericimiz(sender) var, bu yüzden bir alıcı(receiver) zinciri boyunca çalışan bir işleyicimiz(handler) ve alıcının kendisi bu komutu işleyen yapıdır. Bu desen gelen bir isteği işlemeye(handle) ya da oluşturulan sorumluluk zincirinde bir sonraki handle'a devretmeye dayanan bir prensibi bulunmaktadır.

Bu desenin çalışma şekli şu şekildedir, ilk önce bir sorumluluk zinciri kurulur, bu sorumluluk zincirinin her bir halkası üzerine atanmıl bir gelen isteği handle etme kapasitesi bulunmaktadır. Gelen istekleri karşılayan bir handler bu isteği yerine getirebilecek yetki ve donanaıma sahip değilse bir sonraki handler ya da successor(varis) devir eder ve gelen istek handle edilene kadar dolaşır.

Somut bir örnek vermek gerekirse: Bir bankaya 1 milyon TL kredi çekmek için giden Kadir'i önce gişe görevlisi talebini karşılar. Gişe görevlisinin 1-100 Bin TL'lik kredileri onaylama yani bu talepleri handle etme yetkisi ve donanımı olduğunu varsayalım. Lakin gelen talebi düşündüğümüzde handle edemeyeceğinide görürüz, bu durumda bir sonra handler'a yani senaryomuzda birim müdürüne request'i gönderir. Gelen mebla birim müdürününde handle edemeyeceği bir değerde ise şube müdürüne oradan da merkez gönderilir. Gişe memuru, birim müdür, şube müdür ve merkez ile bir sorumluluk zinciri oluşturarak request'leri handle edebiliriz. Böylelikle yetkilerine göre gelen requestler handle edilebilir. 